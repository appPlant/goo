require 'json'
require 'fileutils'

module JobTests

  # Ticket #50:
  # Run ski tool with a job configuration same as
  #
  # ski -s="showver.sh" -t="perlver_template" app
  #
  # on commandline and verify that the generated json report file
  # contains the json output generated by the table formatter
  # and the header with the expected names.
  def test_version_perl_output_and_headers
    setup_job 'test_job'
    run_ski('test_job')
    check_report_content('test_job')
    tear_down('test_job')
  end

  def run_ski(job_name)
    output, error, status = Open3.capture3(PATH, BIN, "-j=#{job_name}")
    check_no_error(output, error, 'test_version_perl_output_and_headers')
    assert_true status.success?, 'Process did not exit cleanly'
  end

  def setup_job(job_name)
    # ski -s="showver.sh" -t="perlver_template" app
    path = File.join(ENV['ORBIT_HOME'], 'jobs', "#{job_name}.json")
    file = File.new(path, File::CREAT|File::TRUNC|File::RDWR, 0644)
    map = {
        debug: true,
        scriptName: '"showver.sh"',
        template: '"perlver_template"',
        planets: ['app']
    }
    file.write(JSON.pretty_generate(map))
    file.close
  end

  def check_report_content(job_name)
    path = File.join(ENV['ORBIT_HOME'], 'jobs_output', job_name, '*.json')
    filenames = Dir.glob(path)
    puts "check_report_content: reports so far #{filenames}"
    assert_false filenames.empty?

    sorted = filenames.sort.reverse
    puts "check_report_content: checking the content of #{sorted[0]}"
    file = File.open(sorted[0], mode='r')
    json = JSON.parse(file.read)
    file.close

    table = JSON.parse(json['planets'][0]['output'])
    assert_false table.empty?

    header = table[0]
    assert_true header.length == 11

    expected = {
        0 => 'willywonka_version',
        1 => 'Section',
        2 => 'Suse',
        3 => 'UnixVersion',
        4 => 'UnixPatch',
        5 => 'Key',
        6 => 'Value',
        7 => 'Key2',
        8 => 'Value2',
        9 => 'Os',
        10 => 'OracleDb',
    }

    (0..header.length).each do |idx|
      assert_true header[idx] == expected[idx]
    end
  end

  def tear_down(job_name)
    path = File.join(ENV['ORBIT_HOME'], 'jobs_output', job_name, '*.json')
    filenames = Dir.glob(path)
    puts "tear_down_job_test: Removing #{filenames}"
    FileUtils.rm_rf(filenames, secure: true)
  end
end
